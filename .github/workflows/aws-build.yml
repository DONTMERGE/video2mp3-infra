name: Connect to an AWS role from a GitHub repository

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      choice:
        type: choice
        description: Choose an action to execute.
        options:
        - apply
        - destroy

env:
  
  AWS_REGION : "us-east-1"
  TF_VERSION : 1.7.4
  TG_VERSION : 0.55.11 

permissions:
      id-token: write
      contents: read

jobs:
  Terragrunt-SetupValidate:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::703866956858:role/GITHUB_OIDC_ROLE
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity

      - name: Terragrunt Validation
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_command: 'hclfmt --terragrunt-check --terragrunt-log-level debug'

  Terragrunt-Plan:
    runs-on: ubuntu-latest
    needs: Terragrunt-SetupValidate
    
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::703866956858:role/GITHUB_OIDC_ROLE
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Plan Step
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_command: 'run-all plan'

  Terragrunt-Apply:
    runs-on: ubuntu-latest
    needs: [ Terragrunt-SetupValidate, Terragrunt-Plan ]
    if: | 
      ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || 
      ( github.event_name == 'workflow_dispatch' &&  github.event.inputs.choice == 'apply')

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::703866956858:role/GITHUB_OIDC_ROLE
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt Apply Step
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_command: 'run-all apply'

  Terragrunt-Destroy:
    runs-on: ubuntu-latest
    needs: [ Terragrunt-SetupValidate, Terragrunt-Plan ]
    if: | 
      ( github.event_name == 'workflow_dispatch' &&  github.event.inputs.choice == 'destroy')

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1.7.0
        with:
          role-to-assume: arn:aws:iam::703866956858:role/GITHUB_OIDC_ROLE
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Terragrunt DESTROY Step
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.TF_VERSION }}
          tg_version: ${{ env.TG_VERSION }}
          tg_command: 'run-all destroy'
